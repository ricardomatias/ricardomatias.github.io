{"ast":null,"code":"var __jsx = React.createElement;\nimport * as THREE from 'three';\nimport React, { useRef, useMemo } from 'react';\nimport { useFrame } from 'react-three-fiber';\nexport var Swarm = function Swarm(_ref) {\n  var count = _ref.count,\n      mouse = _ref.mouse;\n  var mesh = useRef();\n  var dummy = useMemo(function () {\n    return new THREE.Object3D();\n  }, []);\n  var particles = useMemo(function () {\n    var temp = [];\n\n    for (var i = 0; i < count; i++) {\n      var t = Math.random() * 100;\n      var factor = 20 + 15 * (Math.cos(Math.PI * 4.0 / i) * 0.5 + 0.5);\n      var speed = 0.01 + Math.random() / 200;\n      var size = 2.0;\n      temp.push({\n        t: t,\n        factor: factor,\n        speed: speed,\n        size: size,\n        mx: 0,\n        my: 0\n      });\n    }\n\n    return temp;\n  }, [count]);\n  useFrame(function (state) {\n    particles.forEach(function (particle, i) {\n      var t = particle.t,\n          factor = particle.factor,\n          speed = particle.speed,\n          size = particle.size;\n      t = particle.t += speed;\n      var s = Math.max(1.0, (Math.cos(t) * 0.5 + 0.5) * size);\n      var x = Math.cos(i + t) * factor;\n      var y = Math.sin(s + particle.my + t) * 7.0;\n      var z = Math.sin(i + t) * factor;\n      particle.mx += 0.1;\n      particle.my += 0.02;\n      dummy.position.set(x, y - 7.0, z);\n      dummy.scale.set(size, size, size);\n      dummy.updateMatrix();\n      mesh.current.setMatrixAt(i, dummy.matrix);\n    });\n    mesh.current.instanceMatrix.needsUpdate = true;\n  });\n  return __jsx(\"instancedMesh\", {\n    ref: mesh,\n    args: [null, null, count]\n  }, __jsx(\"sphereBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 32, 32]\n  }), __jsx(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"white\"\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}