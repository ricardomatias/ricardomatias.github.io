{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useMemo, useEffect } from 'react';\nimport { useLoader, useThree, useFrame } from 'react-three-fiber';\n\nvar _require = require('postprocessing'),\n    SMAAImageLoader = _require.SMAAImageLoader,\n    BlendFunction = _require.BlendFunction,\n    EffectComposer = _require.EffectComposer,\n    EffectPass = _require.EffectPass,\n    RenderPass = _require.RenderPass,\n    SMAAEffect = _require.SMAAEffect,\n    EdgeDetectionMode = _require.EdgeDetectionMode,\n    SMAAPreset = _require.SMAAPreset,\n    SSAOEffect = _require.SSAOEffect,\n    NormalPass = _require.NormalPass;\n\nimport { HalfFloatType } from 'three'; // Fix smaa loader signature\n\nvar _load = SMAAImageLoader.prototype.load;\n\nSMAAImageLoader.prototype.load = function (_, set) {\n  return _load.bind(this)(set);\n};\n\nexport default function Post() {\n  _s();\n\n  var _useThree = useThree(),\n      gl = _useThree.gl,\n      scene = _useThree.scene,\n      camera = _useThree.camera,\n      size = _useThree.size;\n\n  var smaa = useLoader(SMAAImageLoader);\n  var composer = useMemo(function () {\n    var composer = new EffectComposer(gl);\n    composer.addPass(new RenderPass(scene, camera));\n\n    var smaaEffect = _construct(SMAAEffect, _toConsumableArray(smaa));\n\n    smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.1);\n    var normalPass = new NormalPass(scene, camera);\n    var ssaoEffect = new SSAOEffect(camera, normalPass.renderTarget.texture, {\n      blendFunction: BlendFunction.MULTIPLY,\n      samples: 30,\n      rings: 4,\n      distanceThreshold: 1,\n      // Render distance depends on camera near&far.\n      distanceFalloff: 0.0,\n      // No need for falloff.\n      rangeThreshold: 0.05,\n      // Larger value works better for this camera frustum.\n      rangeFalloff: 0.01,\n      luminanceInfluence: 0.6,\n      radius: 30,\n      scale: 0.55,\n      bias: 0.5\n    });\n    var effectPass = new EffectPass(camera, smaaEffect, ssaoEffect);\n    effectPass.renderToScreen = true;\n    composer.addPass(normalPass);\n    composer.addPass(effectPass);\n    return composer;\n  }, []);\n  useEffect(function () {\n    return void composer.setSize(size.width, size.height);\n  }, [size]);\n  return useFrame(function (_, delta) {\n    return composer.render(delta);\n  }, 1);\n}\n\n_s(Post, \"y5Crm+EHkfQ7FPW4nMOn4oAriEo=\", false, function () {\n  return [useThree, useLoader, useFrame];\n});\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/feral/Projects/ricardomatias.github.io/components/scenes/Effects.js"],"names":["useMemo","useEffect","useLoader","useThree","useFrame","require","SMAAImageLoader","BlendFunction","EffectComposer","EffectPass","RenderPass","SMAAEffect","EdgeDetectionMode","SMAAPreset","SSAOEffect","NormalPass","HalfFloatType","_load","prototype","load","_","set","bind","Post","gl","scene","camera","size","smaa","composer","addPass","smaaEffect","colorEdgesMaterial","setEdgeDetectionThreshold","normalPass","ssaoEffect","renderTarget","texture","blendFunction","MULTIPLY","samples","rings","distanceThreshold","distanceFalloff","rangeThreshold","rangeFalloff","luminanceInfluence","radius","scale","bias","effectPass","renderToScreen","setSize","width","height","delta","render"],"mappings":"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","sourcesContent":["import { useMemo, useEffect } from 'react';\nimport { useLoader, useThree, useFrame } from 'react-three-fiber';\nconst {\n\tSMAAImageLoader,\n\tBlendFunction,\n\tEffectComposer,\n\tEffectPass,\n\tRenderPass,\n\tSMAAEffect,\n\tEdgeDetectionMode,\n\tSMAAPreset,\n\tSSAOEffect,\n\tNormalPass,\n} = require('postprocessing');\nimport {\n\tHalfFloatType,\n} from 'three';\n\n// Fix smaa loader signature\nconst _load = SMAAImageLoader.prototype.load;\n\nSMAAImageLoader.prototype.load = function(_, set) {\n\treturn _load.bind(this)(set);\n};\n\nexport default function Post() {\n\tconst { gl, scene, camera, size } = useThree();\n\tconst smaa = useLoader(SMAAImageLoader);\n\tconst composer = useMemo(() => {\n\t\tconst composer = new EffectComposer(gl);\n\t\tcomposer.addPass(new RenderPass(scene, camera));\n\n\t\tconst smaaEffect = new SMAAEffect(...smaa);\n\t\tsmaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.1);\n\n\t\tconst normalPass = new NormalPass(scene, camera);\n\t\tconst ssaoEffect = new SSAOEffect(camera, normalPass.renderTarget.texture, {\n\t\t\tblendFunction: BlendFunction.MULTIPLY,\n\t\t\tsamples: 30,\n\t\t\trings: 4,\n\t\t\tdistanceThreshold: 1, // Render distance depends on camera near&far.\n\t\t\tdistanceFalloff: 0.0, // No need for falloff.\n\t\t\trangeThreshold: 0.05, // Larger value works better for this camera frustum.\n\t\t\trangeFalloff: 0.01,\n\t\t\tluminanceInfluence: 0.6,\n\t\t\tradius: 30,\n\t\t\tscale: 0.55,\n\t\t\tbias: 0.5\n\t\t});\n\t\t\n\t\tconst effectPass = new EffectPass(camera, smaaEffect, ssaoEffect);\n\t\teffectPass.renderToScreen = true;\n\t\tcomposer.addPass(normalPass);\n\t\tcomposer.addPass(effectPass);\n\t\treturn composer;\n\t}, []);\n\n\tuseEffect(() => void composer.setSize(size.width, size.height), [ size ]);\n\treturn useFrame((_, delta) => composer.render(delta), 1);\n}\n"]},"metadata":{},"sourceType":"module"}