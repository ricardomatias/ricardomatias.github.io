{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst sketchsDir = path.join(process.cwd(), 'sketches');\nexport function getSketches() {\n  const ids = getSketchesIds();\n  console.log('ids', ids);\n  return ids.map(getSketchById);\n}\n;\nexport function getSketchesIds() {\n  return fs.readdirSync(sketchsDir).filter(filename => path.extname(filename) == '.md').map(filename => filename.replace('.md', ''));\n}\nexport function getSketchById(id) {\n  const sketch = fs.readFileSync(path.join(sketchsDir, `${id}.md`), {\n    encoding: 'utf8'\n  });\n  const {\n    data,\n    content\n  } = matter(sketch);\n  return _objectSpread(_objectSpread({}, data), {}, {\n    content\n  });\n}\nexport function pickRandomSketch(sketches, id) {\n  const pool = sketches.filter(sketch => sketch !== id);\n  const roll = Math.floor(Math.random() * (pool.length + 1));\n  const idx = Math.max(Math.min(roll, pool.length - 1), 0);\n  return pool[idx];\n}","map":{"version":3,"sources":["/Users/feral/Projects/ricardomatias.github.io/lib/sketches.js"],"names":["fs","path","matter","sketchsDir","join","process","cwd","getSketches","ids","getSketchesIds","console","log","map","getSketchById","readdirSync","filter","filename","extname","replace","id","sketch","readFileSync","encoding","data","content","pickRandomSketch","sketches","pool","roll","Math","floor","random","length","idx","max","min"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,UAAU,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB,CAAnB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC7B,QAAMC,GAAG,GAAGC,cAAc,EAA1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBH,GAAnB;AACA,SAAOA,GAAG,CAACI,GAAJ,CAAQC,aAAR,CAAP;AACA;AAAA;AAED,OAAO,SAASJ,cAAT,GAA0B;AAChC,SAAOT,EAAE,CAACc,WAAH,CAAeX,UAAf,EACLY,MADK,CACGC,QAAD,IAAcf,IAAI,CAACgB,OAAL,CAAaD,QAAb,KAA0B,KAD1C,EAELJ,GAFK,CAEAI,QAAD,IAAcA,QAAQ,CAACE,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAFb,CAAP;AAGA;AAED,OAAO,SAASL,aAAT,CAAuBM,EAAvB,EAA2B;AACjC,QAAMC,MAAM,GAAGpB,EAAE,CAACqB,YAAH,CAAgBpB,IAAI,CAACG,IAAL,CAAUD,UAAV,EAAuB,GAAEgB,EAAG,KAA5B,CAAhB,EAAmD;AAAEG,IAAAA,QAAQ,EAAE;AAAZ,GAAnD,CAAf;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBtB,MAAM,CAACkB,MAAD,CAAhC;AACA,yCAAWG,IAAX;AAAiBC,IAAAA;AAAjB;AACA;AAED,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCP,EAApC,EAAwC;AAC9C,QAAMQ,IAAI,GAAGD,QAAQ,CAACX,MAAT,CAAiBK,MAAD,IAAYA,MAAM,KAAKD,EAAvC,CAAb;AACA,QAAMS,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,IAAI,CAACK,MAAL,GAAc,CAA/B,CAAX,CAAb;AACA,QAAMC,GAAG,GAAGJ,IAAI,CAACK,GAAL,CAASL,IAAI,CAACM,GAAL,CAASP,IAAT,EAAeD,IAAI,CAACK,MAAL,GAAc,CAA7B,CAAT,EAA0C,CAA1C,CAAZ;AAEA,SAAOL,IAAI,CAACM,GAAD,CAAX;AACA","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\n\nconst sketchsDir = path.join(process.cwd(), 'sketches');\n\nexport function getSketches() {\n\tconst ids = getSketchesIds();\n\tconsole.log('ids', ids);\n\treturn ids.map(getSketchById);\n};\n\nexport function getSketchesIds() {\n\treturn fs.readdirSync(sketchsDir)\n\t\t.filter((filename) => path.extname(filename) == '.md')\n\t\t.map((filename) => filename.replace('.md', ''));\n}\n\nexport function getSketchById(id) {\n\tconst sketch = fs.readFileSync(path.join(sketchsDir, `${id}.md`), { encoding: 'utf8' });\n\tconst { data, content } = matter(sketch);\n\treturn {...data, content};\n}\n\nexport function pickRandomSketch(sketches, id) {\n\tconst pool = sketches.filter((sketch) => sketch !== id);\n\tconst roll = Math.floor(Math.random() * (pool.length + 1));\n\tconst idx = Math.max(Math.min(roll, pool.length - 1), 0);\n\n\treturn pool[idx];\n}\n"]},"metadata":{},"sourceType":"module"}