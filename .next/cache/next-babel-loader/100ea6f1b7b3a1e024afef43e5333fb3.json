{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst sketchsDir = path.join(process.cwd(), 'assets', 'projects', 'sketches');\nexport function getSketches() {\n  const sketches = fs.readFileSync(path.join(sketchsDir, 'sketches.json'));\n  return {\n    params: {\n      sketches\n    }\n  };\n}\n;\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(sketchsDir);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(sketchsDir, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(sketchsDir);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(sketchsDir, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/feral/Projects/ricardomatias.github.io/lib/sketches.js"],"names":["fs","path","matter","remark","html","sketchsDir","join","process","cwd","getSketches","sketches","readFileSync","params","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","matterResult","data","sort","a","b","date","getAllPostIds","getPostData","processedContent","use","content","contentHtml","toString"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,UAAU,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,QAAzB,EAAmC,UAAnC,EAA+C,UAA/C,CAAnB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC7B,QAAMC,QAAQ,GAAGV,EAAE,CAACW,YAAH,CAAgBV,IAAI,CAACK,IAAL,CAAUD,UAAV,EAAsB,eAAtB,CAAhB,CAAjB;AAEA,SAAO;AACNO,IAAAA,MAAM,EAAE;AACPF,MAAAA;AADO;AADF,GAAP;AAKA;AAAA;AAED,OAAO,SAASG,kBAAT,GAA8B;AACpC;AACA,QAAMC,SAAS,GAAGd,EAAE,CAACe,WAAH,CAAeV,UAAf,CAAlB;AACA,QAAMW,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC9C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF8C,CAI9C;;AACA,UAAMC,QAAQ,GAAGpB,IAAI,CAACK,IAAL,CAAUD,UAAV,EAAsBa,QAAtB,CAAjB;AACA,UAAMI,YAAY,GAAGtB,EAAE,CAACW,YAAH,CAAgBU,QAAhB,EAA0B,MAA1B,CAArB,CAN8C,CAQ9C;;AACA,UAAME,YAAY,GAAGrB,MAAM,CAACoB,YAAD,CAA3B,CAT8C,CAW9C;;AACA;AACCH,MAAAA;AADD,OAEII,YAAY,CAACC,IAFjB;AAIA,GAhBoB,CAArB,CAHoC,CAoBpC;;AACA,SAAOR,YAAY,CAACS,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACpB,aAAO,CAAP;AACA,KAFD,MAEO;AACN,aAAO,CAAC,CAAR;AACA;AACD,GANM,CAAP;AAOA;AAED,OAAO,SAASC,aAAT,GAAyB;AAC/B,QAAMf,SAAS,GAAGd,EAAE,CAACe,WAAH,CAAeV,UAAf,CAAlB;AACA,SAAOS,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAChC,WAAO;AACNN,MAAAA,MAAM,EAAE;AACPO,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADG;AADF,KAAP;AAKA,GANM,CAAP;AAOA;AAED,OAAO,eAAeU,WAAf,CAA2BX,EAA3B,EAA+B;AACrC,QAAME,QAAQ,GAAGpB,IAAI,CAACK,IAAL,CAAUD,UAAV,EAAuB,GAAEc,EAAG,KAA5B,CAAjB;AACA,QAAMG,YAAY,GAAGtB,EAAE,CAACW,YAAH,CAAgBU,QAAhB,EAA0B,MAA1B,CAArB,CAFqC,CAIrC;;AACA,QAAME,YAAY,GAAGrB,MAAM,CAACoB,YAAD,CAA3B,CALqC,CAOrC;;AACA,QAAMS,gBAAgB,GAAG,MAAM5B,MAAM,GACnC6B,GAD6B,CACzB5B,IADyB,EAE7BG,OAF6B,CAErBgB,YAAY,CAACU,OAFQ,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB,CAXqC,CAarC;;AACA;AACChB,IAAAA,EADD;AAECe,IAAAA;AAFD,KAGIX,YAAY,CAACC,IAHjB;AAKA","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\n\nconst sketchsDir = path.join(process.cwd(), 'assets', 'projects', 'sketches');\n\nexport function getSketches() {\n\tconst sketches = fs.readFileSync(path.join(sketchsDir, 'sketches.json'));\n\n\treturn {\n\t\tparams: {\n\t\t\tsketches\n\t\t}\n\t};\n};\n\nexport function getSortedPostsData() {\n\t// Get file names under /posts\n\tconst fileNames = fs.readdirSync(sketchsDir);\n\tconst allPostsData = fileNames.map(fileName => {\n\t\t// Remove \".md\" from file name to get id\n\t\tconst id = fileName.replace(/\\.md$/, '');\n\n\t\t// Read markdown file as string\n\t\tconst fullPath = path.join(sketchsDir, fileName);\n\t\tconst fileContents = fs.readFileSync(fullPath, 'utf8');\n\n\t\t// Use gray-matter to parse the post metadata section\n\t\tconst matterResult = matter(fileContents);\n\n\t\t// Combine the data with the id\n\t\treturn {\n\t\t\tid,\n\t\t\t...matterResult.data\n\t\t};\n\t});\n\t// Sort posts by date\n\treturn allPostsData.sort((a, b) => {\n\t\tif (a.date < b.date) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t});\n}\n\nexport function getAllPostIds() {\n\tconst fileNames = fs.readdirSync(sketchsDir);\n\treturn fileNames.map(fileName => {\n\t\treturn {\n\t\t\tparams: {\n\t\t\t\tid: fileName.replace(/\\.md$/, '')\n\t\t\t}\n\t\t};\n\t});\n}\n\nexport async function getPostData(id) {\n\tconst fullPath = path.join(sketchsDir, `${id}.md`);\n\tconst fileContents = fs.readFileSync(fullPath, 'utf8');\n\n\t// Use gray-matter to parse the post metadata section\n\tconst matterResult = matter(fileContents);\n\n\t// Use remark to convert markdown into HTML string\n\tconst processedContent = await remark()\n\t\t.use(html)\n\t\t.process(matterResult.content);\n\tconst contentHtml = processedContent.toString();\n\n\t// Combine the data with the id and contentHtml\n\treturn {\n\t\tid,\n\t\tcontentHtml,\n\t\t...matterResult.data\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}