{"ast":null,"code":"var _jsxFileName = \"/Users/feral/Projects/ricardomatias.github.io/components/home/Gallery.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useStoreState } from 'easy-peasy';\nimport { useTransition, a } from 'react-spring';\nimport useMedia from '../../hooks/useMedia';\nimport useMeasure from '../../hooks/useMeasure';\nimport { SketchLink } from '../links/SketchLink';\nimport { thumbnailLink } from '../../lib/links';\nimport styles from './gallery.module.css';\n\nconst Gallery = ({\n  className,\n  sketches\n}) => {\n  return __jsx(\"div\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 3\n    }\n  }, __jsx(MasonryGallery, {\n    sketches: sketches,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 4\n    }\n  }));\n};\n\nfunction MasonryGallery({\n  sketches\n}) {\n  console.log(styles); // Hook1: Tie media queries to the number of columns\n\n  const columns = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [4, 3, 3], 2);\n  const size = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [300, 300, 200], 200); // Hook2: Measure the width of the container element\n\n  const [bind, {\n    width\n  }] = useMeasure(); // Hook3: Hold items\n  // Hook4: shuffle data every 2 seconds\n  // Form a grid of stacked items using width & columns we got from hooks 1 & 2\n\n  let heights = new Array(columns).fill(0); // Each column gets a height starting with zero\n\n  let gridItems = sketches.map((child, i) => {\n    // Basic masonry-grid placing, puts tile into the smallest column using Math.min\n    const column = heights.indexOf(Math.min(...heights));\n    const s = Math.min(width / columns, size);\n    const margin = width - sketches.length * s; // X = container width / number of columns * column index, Y = it's just the height of the current column\n\n    const xy = [width / columns * column + margin, (heights[column] += size) - size];\n    return _objectSpread(_objectSpread({}, child), {}, {\n      xy,\n      width: s,\n      height: s\n    });\n  }); // Hook5: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n\n  const transitions = useTransition(gridItems, item => item.id, {\n    from: ({\n      xy,\n      width,\n      height\n    }) => ({\n      xy,\n      width,\n      height,\n      opacity: 0\n    }),\n    enter: ({\n      xy,\n      width,\n      height\n    }) => ({\n      xy,\n      width,\n      height,\n      opacity: 1\n    }),\n    update: ({\n      xy,\n      width,\n      height\n    }) => ({\n      xy,\n      width,\n      height\n    }),\n    leave: {\n      height: 0,\n      opacity: 0\n    },\n    config: {\n      mass: 5,\n      tension: 500,\n      friction: 100\n    },\n    trail: 25\n  }); // Render the grid\n\n  return __jsx(\"div\", _extends({}, bind, {\n    className: styles.masonry,\n    style: {\n      height: Math.max(...heights)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }\n  }), transitions.map((_ref) => {\n    let {\n      item: sketch,\n      props: {\n        xy\n      },\n      key\n    } = _ref,\n        rest = _objectWithoutProperties(_ref.props, [\"xy\"]);\n\n    return __jsx(a.div, {\n      key: sketch.id,\n      style: _objectSpread({\n        transform: xy.interpolate((x, y) => `translate3d(${x}px,${y}px,0)`)\n      }, rest),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }, __jsx(SketchLink, {\n      id: sketch.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 6\n      }\n    }, __jsx(\"div\", {\n      className: styles.thumbnail,\n      style: {\n        backgroundImage: `url(${thumbnailLink(sketch)})`,\n        // backgroundSize: 'cover',\n        backgroundPosition: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    })));\n  }));\n}\n\nexport default Gallery;","map":{"version":3,"sources":["/Users/feral/Projects/ricardomatias.github.io/components/home/Gallery.js"],"names":["React","useState","useEffect","useStoreState","useTransition","a","useMedia","useMeasure","SketchLink","thumbnailLink","styles","Gallery","className","sketches","MasonryGallery","console","log","columns","size","bind","width","heights","Array","fill","gridItems","map","child","i","column","indexOf","Math","min","s","margin","length","xy","height","transitions","item","id","from","opacity","enter","update","leave","config","mass","tension","friction","trail","masonry","max","sketch","props","key","rest","transform","interpolate","x","y","thumbnail","backgroundImage","backgroundPosition"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useStoreState } from 'easy-peasy';\nimport { useTransition, a } from 'react-spring';\n\nimport useMedia from '../../hooks/useMedia';\nimport useMeasure from '../../hooks/useMeasure';\nimport { SketchLink } from '../links/SketchLink';\nimport { thumbnailLink } from '../../lib/links';\nimport styles from './gallery.module.css';\n\nconst Gallery = ({ className, sketches }) => {\n\treturn (\n\t\t<div className={className}>\n\t\t\t<MasonryGallery sketches={sketches} />\n\t\t</div>\n\t);\n};\n\nfunction MasonryGallery({ sketches }) {\n\tconsole.log(styles);\n\t// Hook1: Tie media queries to the number of columns\n\tconst columns = useMedia([ '(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)' ], [ 4, 3, 3 ], 2);\n\tconst size = useMedia([ '(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)' ], [ 300, 300, 200 ], 200);\n\n\t// Hook2: Measure the width of the container element\n\tconst [ bind, { width } ] = useMeasure();\n\t// Hook3: Hold items\n\t// Hook4: shuffle data every 2 seconds\n\t// Form a grid of stacked items using width & columns we got from hooks 1 & 2\n\tlet heights = new Array(columns).fill(0); // Each column gets a height starting with zero\n\n\tlet gridItems = sketches.map((child, i) => {\n\t\t// Basic masonry-grid placing, puts tile into the smallest column using Math.min\n\t\tconst column = heights.indexOf(Math.min(...heights));\n\n\t\tconst s = Math.min(width / columns, size);\n\t\tconst margin = (width - (sketches.length * s));\n\n\t\t// X = container width / number of columns * column index, Y = it's just the height of the current column\n\t\tconst xy = [ (width / columns) * column + margin, (heights[column] += size) - size ];\n\t\treturn { ...child, xy, width: s, height: s };\n\t});\n\n\t// Hook5: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n\tconst transitions = useTransition(gridItems, item => item.id, {\n\t\tfrom: ({ xy, width, height }) => ({ xy, width, height, opacity: 0 }),\n\t\tenter: ({ xy, width, height }) => ({ xy, width, height, opacity: 1 }),\n\t\tupdate: ({ xy, width, height }) => ({ xy, width, height }),\n\t\tleave: { height: 0, opacity: 0 },\n\t\tconfig: { mass: 5, tension: 500, friction: 100 },\n\t\ttrail: 25\n\t});\n\n\t// Render the grid\n\treturn (\n\t\t<div {...bind} className={styles.masonry} style={{ height: Math.max(...heights) }}>\n\t\t\t{transitions.map(({ item: sketch, props: { xy, ...rest }, key }) => (\n\t\t\t\t<a.div key={sketch.id} style={{ transform: xy.interpolate((x, y) => `translate3d(${x}px,${y}px,0)`), ...rest }}>\n\t\t\t\t\t<SketchLink id={sketch.id}>\n\t\t\t\t\t\t<div className={styles.thumbnail} style={{\n\t\t\t\t\t\t\tbackgroundImage: `url(${thumbnailLink(sketch)})`,\n\t\t\t\t\t\t\t// backgroundSize: 'cover',\n\t\t\t\t\t\t\tbackgroundPosition: 'center',\n\t\t\t\t\t\t}} />\n\t\t\t\t\t</SketchLink>\n\t\t\t\t</a.div>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default Gallery;\n"]},"metadata":{},"sourceType":"module"}