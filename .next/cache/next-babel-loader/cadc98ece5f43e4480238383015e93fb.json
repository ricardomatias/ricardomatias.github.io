{"ast":null,"code":"var _jsxFileName = \"/Users/feral/Projects/ricardomatias.github.io/components/3d/Swarm.js\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport React, { useRef, useMemo } from 'react';\nimport { useFrame } from 'react-three-fiber';\nexport const Swarm = ({\n  count,\n  mouse\n}) => {\n  const mesh = useRef();\n  const dummy = useMemo(() => new THREE.Object3D(), []);\n  const particles = useMemo(() => {\n    const temp = [];\n\n    for (let i = 0; i < count; i++) {\n      const t = Math.random() * 100;\n      const factor = 20 + 15 * (Math.cos(Math.PI * 4.0 / i) * 0.5 + 0.5);\n      const speed = 0.01 + Math.random() / 200;\n      const size = 2.0;\n      temp.push({\n        t,\n        factor,\n        speed,\n        size,\n        mx: 0,\n        my: 0\n      });\n    }\n\n    return temp;\n  }, [count]);\n  useFrame(state => {\n    particles.forEach((particle, i) => {\n      let {\n        t,\n        factor,\n        speed,\n        size\n      } = particle;\n      t = particle.t += speed;\n      const s = Math.max(1.0, (Math.cos(t) * 0.5 + 0.5) * size);\n      const x = Math.cos(i + t) * factor;\n      const y = Math.sin(s + particle.my + t) * 7.0;\n      const z = Math.sin(i + t) * factor;\n      particle.mx += 0.1;\n      particle.my += 0.02;\n      dummy.position.set(x, y - 7.0, z);\n      dummy.scale.set(size, size, size);\n      dummy.updateMatrix();\n      mesh.current.setMatrixAt(i, dummy.matrix);\n    });\n    mesh.current.instanceMatrix.needsUpdate = true;\n  });\n  return __jsx(\"instancedMesh\", {\n    ref: mesh,\n    args: [null, null, count],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }\n  }, __jsx(\"sphereBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 32, 32],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }\n  }), __jsx(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/feral/Projects/ricardomatias.github.io/components/3d/Swarm.js"],"names":["THREE","React","useRef","useMemo","useFrame","Swarm","count","mouse","mesh","dummy","Object3D","particles","temp","i","t","Math","random","factor","cos","PI","speed","size","push","mx","my","state","forEach","particle","s","max","x","y","sin","z","position","set","scale","updateMatrix","current","setMatrixAt","matrix","instanceMatrix","needsUpdate"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport React, { useRef, useMemo } from 'react';\nimport { useFrame } from 'react-three-fiber';\n\nexport const Swarm = ({ count, mouse }) => {\n\tconst mesh = useRef();\n\tconst dummy = useMemo(() => new THREE.Object3D(), []);\n\n\tconst particles = useMemo(() => {\n\t\tconst temp = [];\n\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tconst t = Math.random() * 100;\n\t\t\tconst factor = 20 + 15 * (Math.cos((Math.PI * 4.0) / i) * 0.5 + 0.5);\n\t\t\tconst speed = 0.01 + Math.random() / 200;\n\t\t\tconst size = 2.0;\n\n\t\t\ttemp.push({ t, factor, speed, size, mx: 0, my: 0 });\n\t\t}\n\t\treturn temp;\n\t}, [ count ]);\n\n\tuseFrame(state => {\n\t\tparticles.forEach((particle, i) => {\n\t\t\tlet { t, factor, speed, size } = particle;\n\t\t\tt = particle.t += speed;\n\n\t\t\tconst s = Math.max(1.0, (Math.cos(t) * 0.5 + 0.5) * size);\n\n\t\t\tconst x = Math.cos(i + t) * factor;\n\t\t\tconst y = Math.sin(s + particle.my + t) * 7.0;\n\t\t\tconst z = Math.sin(i + t) * factor;\n\n\t\t\tparticle.mx += 0.1;\n\t\t\tparticle.my += 0.02;\n\n\t\t\tdummy.position.set(x, y - 7.0, z);\n\t\t\tdummy.scale.set(size, size, size);\n\t\t\tdummy.updateMatrix();\n\t\t\tmesh.current.setMatrixAt(i, dummy.matrix);\n\t\t});\n\n\t\tmesh.current.instanceMatrix.needsUpdate = true;\n\t});\n\n\treturn (\n\t\t<instancedMesh ref={mesh} args={[ null, null, count ]}>\n\t\t\t<sphereBufferGeometry attach=\"geometry\" args={[ 1, 32, 32 ]} />\n\t\t\t<meshPhongMaterial attach=\"material\" color=\"white\" />\n\t\t</instancedMesh>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}