{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useStoreState } from 'easy-peasy';\nimport { useTransition, a } from 'react-spring';\nimport useMedia from '../../hooks/useMedia';\nimport useMeasure from '../../hooks/useMeasure';\nimport { SketchLink } from '../links/SketchLink';\nimport { thumbnailLink } from '../../lib/links';\n\nvar Gallery = function Gallery(_ref) {\n  var className = _ref.className,\n      sketches = _ref.sketches;\n  return __jsx(\"div\", {\n    className: className\n  }, __jsx(MasonryGallery, {\n    sketches: sketches\n  }));\n};\n\nfunction MasonryGallery(_ref2) {\n  var sketches = _ref2.sketches;\n  // Hook1: Tie media queries to the number of columns\n  var columns = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [4, 3, 3], 2);\n  var size = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [300, 300, 200], 200); // Hook2: Measure the width of the container element\n\n  var _useMeasure = useMeasure(),\n      _useMeasure2 = _slicedToArray(_useMeasure, 2),\n      bind = _useMeasure2[0],\n      width = _useMeasure2[1].width; // Hook3: Hold items\n  // Hook4: shuffle data every 2 seconds\n  // Form a grid of stacked items using width & columns we got from hooks 1 & 2\n\n\n  var heights = new Array(columns).fill(0); // Each column gets a height starting with zero\n\n  var gridItems = sketches.map(function (child, i) {\n    // Basic masonry-grid placing, puts tile into the smallest column using Math.min\n    var column = heights.indexOf(Math.min.apply(Math, _toConsumableArray(heights)));\n    var s = Math.min(width / columns, size); // X = container width / number of columns * column index, Y = it's just the height of the current column\n\n    var xy = [width / columns * column, (heights[column] += size) - size];\n    return _objectSpread(_objectSpread({}, child), {}, {\n      xy: xy,\n      width: s,\n      height: s\n    });\n  }); // Hook5: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n\n  var transitions = useTransition(gridItems, function (item) {\n    return item.id;\n  }, {\n    from: function from(_ref3) {\n      var xy = _ref3.xy,\n          width = _ref3.width,\n          height = _ref3.height;\n      return {\n        xy: xy,\n        width: width,\n        height: height,\n        opacity: 0\n      };\n    },\n    enter: function enter(_ref4) {\n      var xy = _ref4.xy,\n          width = _ref4.width,\n          height = _ref4.height;\n      return {\n        xy: xy,\n        width: width,\n        height: height,\n        opacity: 1\n      };\n    },\n    update: function update(_ref5) {\n      var xy = _ref5.xy,\n          width = _ref5.width,\n          height = _ref5.height;\n      return {\n        xy: xy,\n        width: width,\n        height: height\n      };\n    },\n    leave: {\n      height: 0,\n      opacity: 0\n    },\n    config: {\n      mass: 5,\n      tension: 500,\n      friction: 100\n    },\n    trail: 25\n  }); // Render the grid\n\n  return __jsx(\"div\", _extends({}, bind, {\n    className: \"masonry\",\n    style: {\n      height: Math.max.apply(Math, _toConsumableArray(heights))\n    }\n  }), transitions.map(function (_ref6) {\n    var sketch = _ref6.item,\n        _ref6$props = _ref6.props,\n        xy = _ref6$props.xy,\n        rest = _objectWithoutProperties(_ref6$props, [\"xy\"]),\n        key = _ref6.key;\n\n    return __jsx(a.div, {\n      key: sketch.id,\n      style: _objectSpread({\n        transform: xy.interpolate(function (x, y) {\n          return \"translate3d(\".concat(x, \"px,\").concat(y, \"px,0)\");\n        })\n      }, rest)\n    }, __jsx(SketchLink, {\n      id: sketch.id\n    }, __jsx(\"div\", {\n      className: \"thumbnail\",\n      style: {\n        backgroundImage: \"url(\".concat(thumbnailLink(sketch), \")\"),\n        // backgroundSize: 'cover',\n        backgroundPosition: 'center'\n      }\n    })));\n  }));\n}\n\nexport default Gallery;","map":null,"metadata":{},"sourceType":"module"}