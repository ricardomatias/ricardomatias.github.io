{"ast":null,"code":"import { useRef, useState, useEffect } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\nexport default function useMeasure() {\n  const ref = useRef();\n  const {\n    0: bounds,\n    1: set\n  } = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n  });\n  const {\n    0: ro\n  } = useState(() => new ResizeObserver(([entry]) => set(entry.contentRect)));\n  console.log('useMeasure');\n  useEffect(() => {\n    ro.observe(ref.current);\n    return () => {\n      ro.unobserve(ref.current);\n      ro.disconnect();\n    };\n  }, []);\n  return [{\n    ref\n  }, bounds];\n}","map":{"version":3,"sources":["/Users/feral/Projects/ricardomatias.github.io/hooks/useMeasure.js"],"names":["useRef","useState","useEffect","ResizeObserver","useMeasure","ref","bounds","set","left","top","width","height","ro","entry","contentRect","console","log","observe","current","unobserve","disconnect"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA,eAAe,SAASC,UAAT,GAAsB;AACpC,QAAMC,GAAG,GAAGL,MAAM,EAAlB;AACA,QAAM;AAAA,OAAEM,MAAF;AAAA,OAAUC;AAAV,MAAkBN,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAhB;AAAmBC,IAAAA,KAAK,EAAE,CAA1B;AAA6BC,IAAAA,MAAM,EAAE;AAArC,GAAD,CAAhC;AACA,QAAM;AAAA,OAAEC;AAAF,MAASX,QAAQ,CAAC,MAAM,IAAIE,cAAJ,CAAmB,CAAC,CAAEU,KAAF,CAAD,KAAeN,GAAG,CAACM,KAAK,CAACC,WAAP,CAArC,CAAP,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAd,EAAAA,SAAS,CAAC,MAAM;AACfU,IAAAA,EAAE,CAACK,OAAH,CAAWZ,GAAG,CAACa,OAAf;AACA,WAAO,MAAM;AACZN,MAAAA,EAAE,CAACO,SAAH,CAAad,GAAG,CAACa,OAAjB;AACAN,MAAAA,EAAE,CAACQ,UAAH;AACA,KAHD;AAIA,GANQ,EAMN,EANM,CAAT;AAQA,SAAO,CAAE;AAAEf,IAAAA;AAAF,GAAF,EAAWC,MAAX,CAAP;AACA","sourcesContent":["import { useRef, useState, useEffect } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport default function useMeasure() {\n\tconst ref = useRef();\n\tconst [ bounds, set ] = useState({ left: 0, top: 0, width: 0, height: 0 });\n\tconst [ ro ] = useState(() => new ResizeObserver(([ entry ]) => set(entry.contentRect)));\n\tconsole.log('useMeasure');\n\tuseEffect(() => {\n\t\tro.observe(ref.current);\n\t\treturn () => {\n\t\t\tro.unobserve(ref.current);\n\t\t\tro.disconnect();\n\t\t};\n\t}, []);\n\n\treturn [ { ref }, bounds ];\n}\n"]},"metadata":{},"sourceType":"module"}