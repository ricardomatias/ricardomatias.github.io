{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useStoreState } from 'easy-peasy';\nimport { useTransition, a } from 'react-spring';\nimport useMedia from '../../hooks/useMedia';\nimport useMeasure from '../../hooks/useMeasure';\nimport { SketchLink } from '../links/SketchLink';\nimport { thumbnailLink } from '../../lib/links';\n\nconst Gallery = ({\n  className,\n  sketches\n}) => {\n  return __jsx(\"div\", {\n    className: className\n  }, __jsx(MasonryGallery, {\n    sketches: sketches\n  }));\n};\n\nfunction MasonryGallery({\n  sketches\n}) {\n  // Hook1: Tie media queries to the number of columns\n  const columns = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [4, 3, 3], 2);\n  const size = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [300, 300, 200], 200); // Hook2: Measure the width of the container element\n\n  const [bind, {\n    width\n  }] = useMeasure(); // Hook3: Hold items\n  // Hook4: shuffle data every 2 seconds\n  // Form a grid of stacked items using width & columns we got from hooks 1 & 2\n\n  let heights = new Array(columns).fill(0); // Each column gets a height starting with zero\n\n  let gridItems = sketches.map((child, i) => {\n    // Basic masonry-grid placing, puts tile into the smallest column using Math.min\n    const column = heights.indexOf(Math.min(...heights));\n    const s = Math.min(width / columns, size); // X = container width / number of columns * column index, Y = it's just the height of the current column\n\n    const xy = [width / columns * column, (heights[column] += size) - size];\n    return _objectSpread(_objectSpread({}, child), {}, {\n      xy,\n      width: s,\n      height: s\n    });\n  }); // Hook5: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n\n  const transitions = useTransition(gridItems, item => item.id, {\n    from: ({\n      xy,\n      width,\n      height\n    }) => ({\n      xy,\n      width,\n      height,\n      opacity: 0\n    }),\n    enter: ({\n      xy,\n      width,\n      height\n    }) => ({\n      xy,\n      width,\n      height,\n      opacity: 1\n    }),\n    update: ({\n      xy,\n      width,\n      height\n    }) => ({\n      xy,\n      width,\n      height\n    }),\n    leave: {\n      height: 0,\n      opacity: 0\n    },\n    config: {\n      mass: 5,\n      tension: 500,\n      friction: 100\n    },\n    trail: 25\n  }); // Render the grid\n\n  return __jsx(\"div\", _extends({}, bind, {\n    className: \"masonry\",\n    style: {\n      height: Math.max(...heights)\n    }\n  }), transitions.map((_ref) => {\n    let {\n      item: sketch,\n      props: {\n        xy\n      },\n      key\n    } = _ref,\n        rest = _objectWithoutProperties(_ref.props, [\"xy\"]);\n\n    return __jsx(a.div, {\n      key: sketch.id,\n      style: _objectSpread({\n        transform: xy.interpolate((x, y) => `translate3d(${x}px,${y}px,0)`)\n      }, rest)\n    }, __jsx(SketchLink, {\n      id: sketch.id\n    }, __jsx(\"div\", {\n      className: \"thumbnail\",\n      style: {\n        backgroundImage: `url(${thumbnailLink(sketch)})`,\n        // backgroundSize: 'cover',\n        backgroundPosition: 'center'\n      }\n    })));\n  }));\n}\n\nexport default Gallery;","map":null,"metadata":{},"sourceType":"module"}