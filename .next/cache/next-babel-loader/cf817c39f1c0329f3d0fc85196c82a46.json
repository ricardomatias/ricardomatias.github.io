{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/feral/Projects/ricardomatias.github.io/components/home/Gallery.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useStoreState } from 'easy-peasy';\nimport { useTransition, a } from 'react-spring';\nimport ActiveLink from '../ActiveLink';\nimport useMedia from '../../hooks/useMedia';\nimport useMeasure from '../../hooks/useMeasure';\n\nvar Gallery = function Gallery(_ref) {\n  var className = _ref.className;\n  return __jsx(\"div\", {\n    className: className,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 3\n    }\n  }, __jsx(MasonryGallery, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 4\n    }\n  }));\n};\n\n_c = Gallery;\n\nfunction MasonryGallery(_ref2) {\n  _s();\n\n  var _this2 = this;\n\n  var sketches = _ref2.sketches;\n  console.log(window); // Hook1: Tie media queries to the number of columns\n\n  var columns = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [4, 3, 3], 2);\n  var size = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [300, 300, 200], 200); // Hook2: Measure the width of the container element\n\n  var _useMeasure = useMeasure(),\n      _useMeasure2 = _slicedToArray(_useMeasure, 2),\n      bind = _useMeasure2[0],\n      width = _useMeasure2[1].width; // Hook3: Hold items\n  // Hook4: shuffle data every 2 seconds\n  // Form a grid of stacked items using width & columns we got from hooks 1 & 2\n\n\n  var heights = new Array(columns).fill(0); // Each column gets a height starting with zero\n\n  var gridItems = sketches.map(function (child, i) {\n    // Basic masonry-grid placing, puts tile into the smallest column using Math.min\n    var column = heights.indexOf(Math.min.apply(Math, _toConsumableArray(heights)));\n    var s = Math.min(width / columns, size); // X = container width / number of columns * column index, Y = it's just the height of the current column\n\n    var xy = [width / columns * column, (heights[column] += size) - size];\n    return _objectSpread(_objectSpread({}, child), {}, {\n      xy: xy,\n      width: s,\n      height: s\n    });\n  }); // Hook5: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n\n  var transitions = useTransition(gridItems, function (item) {\n    return item.id;\n  }, {\n    from: function from(_ref3) {\n      var xy = _ref3.xy,\n          width = _ref3.width,\n          height = _ref3.height;\n      return {\n        xy: xy,\n        width: width,\n        height: height,\n        opacity: 0\n      };\n    },\n    enter: function enter(_ref4) {\n      var xy = _ref4.xy,\n          width = _ref4.width,\n          height = _ref4.height;\n      return {\n        xy: xy,\n        width: width,\n        height: height,\n        opacity: 1\n      };\n    },\n    update: function update(_ref5) {\n      var xy = _ref5.xy,\n          width = _ref5.width,\n          height = _ref5.height;\n      return {\n        xy: xy,\n        width: width,\n        height: height\n      };\n    },\n    leave: {\n      height: 0,\n      opacity: 0\n    },\n    config: {\n      mass: 5,\n      tension: 500,\n      friction: 100\n    },\n    trail: 25\n  }); // Render the grid\n\n  return __jsx(\"div\", _extends({}, bind, {\n    className: \"masonry\",\n    style: {\n      height: Math.max.apply(Math, _toConsumableArray(heights))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  }), transitions.map(function (_ref6) {\n    var sketch = _ref6.item,\n        _ref6$props = _ref6.props,\n        xy = _ref6$props.xy,\n        rest = _objectWithoutProperties(_ref6$props, [\"xy\"]),\n        key = _ref6.key;\n\n    return __jsx(a.div, {\n      key: sketch.id,\n      style: _objectSpread({\n        transform: xy.interpolate(function (x, y) {\n          return \"translate3d(\".concat(x, \"px,\").concat(y, \"px,0)\");\n        })\n      }, rest),\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }\n    }, __jsx(ActiveLink, {\n      href: \"/sketch/\".concat(sketch.id),\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 6\n      }\n    }, __jsx(\"div\", {\n      className: \"thumbnail\",\n      style: {\n        backgroundImage: \"url(\".concat(sketch.thumbnail, \")\"),\n        // backgroundSize: 'cover',\n        backgroundPosition: 'center'\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    })));\n  }));\n}\n\n_s(MasonryGallery, \"koaI5TcQhAvHibEMq+d726+Bgto=\", false, function () {\n  return [useMedia, useMedia, useMeasure, useTransition];\n});\n\n_c2 = MasonryGallery;\nexport default Gallery;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Gallery\");\n$RefreshReg$(_c2, \"MasonryGallery\");","map":{"version":3,"sources":["/Users/feral/Projects/ricardomatias.github.io/components/home/Gallery.js"],"names":["React","useState","useEffect","useStoreState","useTransition","a","ActiveLink","useMedia","useMeasure","Gallery","className","MasonryGallery","sketches","console","log","window","columns","size","bind","width","heights","Array","fill","gridItems","map","child","i","column","indexOf","Math","min","s","xy","height","transitions","item","id","from","opacity","enter","update","leave","config","mass","tension","friction","trail","max","sketch","props","rest","key","transform","interpolate","x","y","backgroundImage","thumbnail","backgroundPosition"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useStoreState } from 'easy-peasy';\nimport { useTransition, a } from 'react-spring';\n\nimport ActiveLink from '../ActiveLink';\nimport useMedia from '../../hooks/useMedia';\nimport useMeasure from '../../hooks/useMeasure';\n\nconst Gallery = ({ className }) => {\n\treturn (\n\t\t<div className={className}>\n\t\t\t<MasonryGallery />\n\t\t</div>\n\t);\n};\n\n\nfunction MasonryGallery({ sketches }) {\n\tconsole.log(window);\n\t// Hook1: Tie media queries to the number of columns\n\tconst columns = useMedia([ '(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)' ], [ 4, 3, 3 ], 2);\n\tconst size = useMedia([ '(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)' ], [ 300, 300, 200 ], 200);\n\n\t// Hook2: Measure the width of the container element\n\tconst [ bind, { width } ] = useMeasure();\n\t// Hook3: Hold items\n\t// Hook4: shuffle data every 2 seconds\n\t// Form a grid of stacked items using width & columns we got from hooks 1 & 2\n\tlet heights = new Array(columns).fill(0); // Each column gets a height starting with zero\n\n\tlet gridItems = sketches.map((child, i) => {\n\t\t// Basic masonry-grid placing, puts tile into the smallest column using Math.min\n\t\tconst column = heights.indexOf(Math.min(...heights));\n\n\t\tconst s = Math.min(width / columns, size);\n\n\t\t// X = container width / number of columns * column index, Y = it's just the height of the current column\n\t\tconst xy = [ (width / columns) * column, (heights[column] += size) - size ];\n\t\treturn { ...child, xy, width: s, height: s };\n\t});\n\n\t// Hook5: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n\tconst transitions = useTransition(gridItems, item => item.id, {\n\t\tfrom: ({ xy, width, height }) => ({ xy, width, height, opacity: 0 }),\n\t\tenter: ({ xy, width, height }) => ({ xy, width, height, opacity: 1 }),\n\t\tupdate: ({ xy, width, height }) => ({ xy, width, height }),\n\t\tleave: { height: 0, opacity: 0 },\n\t\tconfig: { mass: 5, tension: 500, friction: 100 },\n\t\ttrail: 25\n\t});\n\t\n\t// Render the grid\n\treturn (\n\t\t<div {...bind} className=\"masonry\" style={{ height: Math.max(...heights) }}>\n\t\t\t{transitions.map(({ item: sketch, props: { xy, ...rest }, key }) => (\n\t\t\t\t<a.div key={sketch.id} style={{ transform: xy.interpolate((x, y) => `translate3d(${x}px,${y}px,0)`), ...rest }}>\n\t\t\t\t\t<ActiveLink href={`/sketch/${sketch.id}`}>\n\t\t\t\t\t\t<div className=\"thumbnail\" style={{\n\t\t\t\t\t\t\tbackgroundImage: `url(${sketch.thumbnail})`,\n\t\t\t\t\t\t\t// backgroundSize: 'cover',\n\t\t\t\t\t\t\tbackgroundPosition: 'center',\n\t\t\t\t\t\t}} />\n\t\t\t\t\t</ActiveLink>\n\t\t\t\t</a.div>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default Gallery;\n"]},"metadata":{},"sourceType":"module"}