{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst sketchsDir = path.join(process.cwd(), 'public', 'projects');\nexport function getSketches() {\n  const ids = getSketchesIds();\n  return ids.map(id => {\n    const sketch = fs.readFileSync(path.join(sketchsDir, `${id}.md`), {\n      encoding: 'utf8'\n    });\n    const {\n      data,\n      content\n    } = matter(sketch);\n    return _objectSpread(_objectSpread({}, data), {}, {\n      content\n    });\n  });\n}\n;\nexport function getSketchesIds() {\n  return fs.readdirSync(sketchsDir).filter(filename => path.extname(filename) === 'md');\n}\nexport function getSketchById(sketches, id) {\n  return sketches.filter(sketch => sketch.id === id)[0];\n}\n;\nexport function pickRandomSketch(sketches, id) {\n  const pool = sketches.filter(sketch => sketch.id !== id);\n  const roll = Math.floor(Math.random() * (pool.length + 1));\n  const idx = Math.max(Math.min(roll, pool.length - 1), 0);\n  return pool[idx];\n}","map":{"version":3,"sources":["/Users/feral/Projects/ricardomatias.github.io/lib/sketches.js"],"names":["fs","path","matter","sketchsDir","join","process","cwd","getSketches","ids","getSketchesIds","map","id","sketch","readFileSync","encoding","data","content","readdirSync","filter","filename","extname","getSketchById","sketches","pickRandomSketch","pool","roll","Math","floor","random","length","idx","max","min"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,UAAU,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,QAAzB,EAAmC,UAAnC,CAAnB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC7B,QAAMC,GAAG,GAAGC,cAAc,EAA1B;AAEA,SAAOD,GAAG,CAACE,GAAJ,CAASC,EAAD,IAAQ;AACtB,UAAMC,MAAM,GAAGZ,EAAE,CAACa,YAAH,CAAgBZ,IAAI,CAACG,IAAL,CAAUD,UAAV,EAAuB,GAAEQ,EAAG,KAA5B,CAAhB,EAAmD;AAAEG,MAAAA,QAAQ,EAAE;AAAZ,KAAnD,CAAf;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBd,MAAM,CAACU,MAAD,CAAhC;AAEA,2CAAYG,IAAZ;AAAkBC,MAAAA;AAAlB;AACA,GALM,CAAP;AAMA;AAAA;AAED,OAAO,SAASP,cAAT,GAA0B;AAChC,SAAOT,EAAE,CAACiB,WAAH,CAAed,UAAf,EAA2Be,MAA3B,CAAmCC,QAAD,IAAclB,IAAI,CAACmB,OAAL,CAAaD,QAAb,MAA2B,IAA3E,CAAP;AACA;AAED,OAAO,SAASE,aAAT,CAAuBC,QAAvB,EAAiCX,EAAjC,EAAqC;AAC3C,SAAOW,QAAQ,CAACJ,MAAT,CAAiBN,MAAD,IAAYA,MAAM,CAACD,EAAP,KAAcA,EAA1C,EAA8C,CAA9C,CAAP;AACA;AAAA;AAED,OAAO,SAASY,gBAAT,CAA0BD,QAA1B,EAAoCX,EAApC,EAAwC;AAC9C,QAAMa,IAAI,GAAGF,QAAQ,CAACJ,MAAT,CAAiBN,MAAD,IAAYA,MAAM,CAACD,EAAP,KAAcA,EAA1C,CAAb;AACA,QAAMc,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,IAAI,CAACK,MAAL,GAAc,CAA/B,CAAX,CAAb;AACA,QAAMC,GAAG,GAAGJ,IAAI,CAACK,GAAL,CAASL,IAAI,CAACM,GAAL,CAASP,IAAT,EAAeD,IAAI,CAACK,MAAL,GAAc,CAA7B,CAAT,EAA0C,CAA1C,CAAZ;AAEA,SAAOL,IAAI,CAACM,GAAD,CAAX;AACA","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\n\nconst sketchsDir = path.join(process.cwd(), 'public', 'projects');\n\nexport function getSketches() {\n\tconst ids = getSketchesIds();\n\n\treturn ids.map((id) => {\n\t\tconst sketch = fs.readFileSync(path.join(sketchsDir, `${id}.md`), { encoding: 'utf8' });\n\t\tconst { data, content } = matter(sketch);\n\n\t\treturn { ...data, content };\n\t});\n};\n\nexport function getSketchesIds() {\n\treturn fs.readdirSync(sketchsDir).filter((filename) => path.extname(filename) === 'md');\n}\n\nexport function getSketchById(sketches, id) {\n\treturn sketches.filter((sketch) => sketch.id === id)[0];\n};\n\nexport function pickRandomSketch(sketches, id) {\n\tconst pool = sketches.filter((sketch) => sketch.id !== id);\n\tconst roll = Math.floor(Math.random() * (pool.length + 1));\n\tconst idx = Math.max(Math.min(roll, pool.length - 1), 0);\n\n\treturn pool[idx];\n}\n"]},"metadata":{},"sourceType":"module"}