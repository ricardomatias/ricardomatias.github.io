{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst sketchsDir = path.join(process.cwd(), 'sketches');\nexport function getSketches() {\n  const ids = getSketchesIds();\n  return ids.map(getSketchById);\n}\n;\nexport function getSketchesIds() {\n  return fs.readdirSync(sketchsDir).filter(filename => path.extname(filename) == '.md').map(filename => filename.replace('.md', ''));\n}\nexport function getSketchById(id) {\n  const sketch = fs.readFileSync(path.join(sketchsDir, `${id}.md`), {\n    encoding: 'utf8'\n  });\n  const {\n    data,\n    content\n  } = matter(sketch);\n  return _objectSpread(_objectSpread({}, data), {}, {\n    content\n  });\n}\nexport function pickRandomSketch(sketches, id) {\n  const pool = sketches.filter(sketch => sketch !== id);\n  const roll = Math.floor(Math.random() * (pool.length + 1));\n  const idx = Math.max(Math.min(roll, pool.length - 1), 0);\n  return pool[idx];\n}","map":null,"metadata":{},"sourceType":"module"}