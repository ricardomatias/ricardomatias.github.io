{"ast":null,"code":"var __jsx = React.createElement;\nimport * as THREE from 'three';\nimport React, { useRef, useMemo } from 'react';\nimport { useFrame } from 'react-three-fiber';\nexport const Swarm = ({\n  count,\n  mouse\n}) => {\n  const mesh = useRef();\n  const dummy = useMemo(() => new THREE.Object3D(), []);\n  const particles = useMemo(() => {\n    const temp = [];\n\n    for (let i = 0; i < count; i++) {\n      const t = Math.random() * 100;\n      const factor = 20 + 15 * (Math.cos(Math.PI * 4.0 / i) * 0.5 + 0.5);\n      const speed = 0.01 + Math.random() / 200;\n      const size = 2.0;\n      temp.push({\n        t,\n        factor,\n        speed,\n        size,\n        mx: 0,\n        my: 0\n      });\n    }\n\n    return temp;\n  }, [count]);\n  useFrame(state => {\n    particles.forEach((particle, i) => {\n      let {\n        t,\n        factor,\n        speed,\n        size\n      } = particle;\n      t = particle.t += speed;\n      const s = Math.max(1.0, (Math.cos(t) * 0.5 + 0.5) * size);\n      const x = Math.cos(i + t) * factor;\n      const y = Math.sin(s + particle.my + t) * 7.0;\n      const z = Math.sin(i + t) * factor;\n      particle.mx += 0.1;\n      particle.my += 0.02;\n      dummy.position.set(x, y - 7.0, z);\n      dummy.scale.set(size, size, size);\n      dummy.updateMatrix();\n      mesh.current.setMatrixAt(i, dummy.matrix);\n    });\n    mesh.current.instanceMatrix.needsUpdate = true;\n  });\n  return __jsx(\"instancedMesh\", {\n    ref: mesh,\n    args: [null, null, count]\n  }, __jsx(\"sphereBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 32, 32]\n  }), __jsx(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"white\"\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}